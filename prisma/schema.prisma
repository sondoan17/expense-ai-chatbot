// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  VND
  USD
}

enum TxnType {
  EXPENSE
  INCOME
}

enum RecurringFreq {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ChatRole {
  USER
  ASSISTANT
}

enum ChatMessageStatus {
  SENT
  ERROR
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  passwordHash String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  budgets      Budget[]
  chatMessages ChatMessage[]
}

model Category {
  id                   String                @id @default(cuid())
  name                 String                @unique
  icon                 String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  txns                 Transaction[]
  budgets              Budget[]
  recurringRules       RecurringRule[]
  recurringBudgetRules RecurringBudgetRule[]
}

model Transaction {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  type       TxnType
  amount     Decimal   @db.Decimal(18, 2)
  currency   Currency  @default(VND)
  note       String?
  occurredAt DateTime  @default(now())
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  meta       Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId, occurredAt])
  @@index([categoryId])
}

model RecurringRule {
  id         String            @id @default(cuid())
  userId     String
  enabled    Boolean           @default(true)
  freq       RecurringFreq
  dayOfMonth Int?
  weekday    Int?
  timeOfDay  String
  timezone   String
  startDate  DateTime
  endDate    DateTime?
  type       TxnType
  amount     Decimal           @db.Decimal(18, 2)
  currency   Currency          @default(VND)
  categoryId String?
  category   Category?         @relation(fields: [categoryId], references: [id])
  note       String?
  nextRunAt  DateTime
  lastRunAt  DateTime?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  runLogs    RecurringRunLog[]

  @@index([userId, enabled, nextRunAt])
  @@index([categoryId])
}

model RecurringRunLog {
  id              String        @id @default(cuid())
  recurringRuleId String
  recurringRule   RecurringRule @relation(fields: [recurringRuleId], references: [id])
  occurredDate    DateTime
  txnId           String?
  status          String
  message         String?
  createdAt       DateTime      @default(now())

  @@unique([recurringRuleId, occurredDate])
}

model Budget {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  month       Int // 1..12
  year        Int
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  limitAmount Decimal   @db.Decimal(18, 2)
  currency    Currency  @default(VND)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, year, month, categoryId])
}

model RecurringBudgetRule {
  id         String                  @id @default(cuid())
  userId     String
  enabled    Boolean                 @default(true)
  freq       RecurringFreq
  dayOfMonth Int?
  weekday    Int?
  timeOfDay  String
  timezone   String
  startDate  DateTime
  endDate    DateTime?
  amount     Decimal                 @db.Decimal(18, 2)
  currency   Currency                @default(VND)
  categoryId String?
  category   Category?               @relation(fields: [categoryId], references: [id])
  note       String?
  nextRunAt  DateTime
  lastRunAt  DateTime?
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  runLogs    RecurringBudgetRunLog[]

  @@index([userId, enabled, nextRunAt])
  @@index([categoryId])
}

model RecurringBudgetRunLog {
  id                    String              @id @default(cuid())
  recurringBudgetRuleId String
  recurringBudgetRule   RecurringBudgetRule @relation(fields: [recurringBudgetRuleId], references: [id])
  occurredDate          DateTime
  budgetId              String?
  status                String
  message               String?
  createdAt             DateTime            @default(now())

  @@unique([recurringBudgetRuleId, occurredDate])
}

model ChatMessage {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  role      ChatRole
  status    ChatMessageStatus @default(SENT)
  content   String
  createdAt DateTime          @default(now())

  @@index([userId, createdAt])
}
