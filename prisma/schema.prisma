// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  VND
  USD
}

enum TxnType {
  EXPENSE
  INCOME
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum ChatRole {
  USER
  ASSISTANT
}

enum ChatMessageStatus {
  SENT
  ERROR
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  passwordHash  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  budgets       Budget[]
  chatMessages  ChatMessage[]
  recurringTransactions RecurringTransaction[]
}

model Category {
  id        String        @id @default(cuid())
  name      String        @unique
  icon      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  txns      Transaction[]
  budgets   Budget[]
  recurringTransactions RecurringTransaction[]
}

model Transaction {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  type       TxnType
  amount     Decimal   @db.Decimal(18, 2)
  currency   Currency  @default(VND)
  note       String?
  occurredAt DateTime  @default(now())
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  meta       Json?
  recurringTransactionId String?
  recurringTransaction   RecurringTransaction? @relation(fields: [recurringTransactionId], references: [id])
  scheduledFor           DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId, occurredAt])
  @@index([categoryId])
  @@index([recurringTransactionId])
  @@unique([recurringTransactionId, scheduledFor])
}

model Budget {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  month       Int       // 1..12
  year        Int
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  limitAmount Decimal    @db.Decimal(18, 2)
  currency    Currency   @default(VND)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, year, month, categoryId])
}

model ChatMessage {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  role      ChatRole
  status    ChatMessageStatus  @default(SENT)
  content   String
  createdAt DateTime           @default(now())

  @@index([userId, createdAt])
}

model RecurringTransaction {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        TxnType
  amount      Decimal   @db.Decimal(18, 2)
  currency    Currency  @default(VND)
  note        String?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  frequency   RecurringFrequency
  interval    Int       @default(1)
  dayOfMonth  Int?
  weekday     Int?
  startDate   DateTime
  endDate     DateTime?
  timezone    String
  nextRunAt   DateTime?
  lastRunAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  transactions Transaction[]

  @@index([userId, isActive, nextRunAt])
}
